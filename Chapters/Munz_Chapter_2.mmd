## What is an Edge?
People say "A picture is worth a thousand words" and this is true. There is a lot of information cantained in even the most simplest images. However, not all of the information in an image is required. If we keep just the edges or the outlines of object, we as humans can still determine what the outlines represent. This is the approach many researchers have taken with regards to segmentation and detection **(TODO): Add reference**. The orginal image is reduced down to a black and white image where the white pixels represent the detected edges.

Before we discuss different edge detection methods, we first need to define what an edge is. In image processing an edge is a place of rapid change in the intensity of the image. An example of can be seen in Figure <!--\ref{fig:edge1}-->. The figure is a simplified image containing a black rectange against a white background. 

<!--
	\begin{figure}[h]
    	\centering
    	\includegraphics[width=0.5\textwidth]{/home/ryan/Documents/Thesis/scriptorium/papers/Munz_Ryan_Masters_Thesis/Thesis_Images/What_is_an_Edge/Edge_with_Scan_Line.png}
    	\caption{The image above is a simplified example of edges. The red line represents the scan line which crosses over two edges.}
    	\label{fig:edge1}
	\end{figure}
-->

<!--
	\begin{figure}[h]
    	\centering
    	\includegraphics[width=0.5\textwidth]{/home/ryan/Documents/Thesis/scriptorium/papers/Munz_Ryan_Masters_Thesis/Thesis_Images/What_is_an_Edge/Intensity.png}
    	\caption{This figure plots the intensities of the pixels along the scan line going from left to right.}
    	\label{fig:edge2}
	\end{figure}
-->

<!--
	\begin{figure}[h]
    	\centering
    	\includegraphics[width=0.5\textwidth]{/home/ryan/Documents/Thesis/scriptorium/papers/Munz_Ryan_Masters_Thesis/Thesis_Images/What_is_an_Edge/Der_Intensity.png}
    	\caption{This figure plots the derivative of the previous intensity plot.}
    	\label{fig:edge3}
	\end{figure}
-->

<!--
	\begin{figure}[h]
    	\centering
    	\includegraphics[width=0.5\textwidth]{/home/ryan/Documents/Thesis/scriptorium/papers/Munz_Ryan_Masters_Thesis/Thesis_Images/What_is_an_Edge/Edge_Noise.png}
    	\caption{The image above is a simplified example of edges. The red line represents the scan line which crosses over two edges.}
    	\label{fig:edge4}
	\end{figure}
-->

<!--
	\begin{figure}[h]
    	\centering
    	\includegraphics[width=0.5\textwidth]{/home/ryan/Documents/Thesis/scriptorium/papers/Munz_Ryan_Masters_Thesis/Thesis_Images/What_is_an_Edge/Intensity_Noise.png}
    	\caption{This figure plots the intensities of the pixels along the scan line going from left to right.}
    	\label{fig:edge5}
	\end{figure}
-->

<!--
	\begin{figure}[h]
    	\centering
    	\includegraphics[width=0.5\textwidth]{/home/ryan/Documents/Thesis/scriptorium/papers/Munz_Ryan_Masters_Thesis/Thesis_Images/What_is_an_Edge/Der_Intensity_Noise.png}
    	\caption{This figure plots the derivative of the previous intensity plot.}
    	\label{fig:edge6}
	\end{figure}
-->

## Edge Detectors
In this section, different classical edge detectors will be introduced. The similarities and differences between them will be discussed.

We will also discuss why the Canny Edge Detector has become the "standard" in image processing.

There have been many edge detectors, but in this section, we will be focusing on 4 well known classical detectors. These detectors are Roberts, Prewitt, Sobel, and Canny. With the improvements in computing technology, the classical methods are becoming obsolete. The reason for this is more advanced methods can be used such as Neural Networks and Genetic Algorithms to create a more robust detector. However, most advance methods still refer to or even use some of the classical methods.

The advanced methods are outside the scope of the paper and therefore will only be briefly introduced.

### Roberts Cross Operator
The Roberts Cross Operator, or Roberts Operator, was one of the first edge detection methods. Developed by Lawrence Roberts in 1963, 

Since the convolution mask is diagonal, the Roberts operator is best at detecting edges at 45 degree angles.

The 2x2 convolution masks that the operator uses are:

**(TODO)**:Add convolution masks

Due to the small size of the Roberts Operator (2x2), the operator is not robust against noise in the image. This is because when the operator is calculating the 

### Prewitt Detector

The 3x3 convolution masks that the operator uses are:

**(TODO)**:Add convolution masks

### Sobel Detector

The 3x3 convolution masks that the operator uses are:

**(TODO)**:Add convolution masks

### Canny Detector

The Canny Edge Detector was developed by John Canny in 1986 and is the most popular classical method in use today.

**(TODO)**: Move the paragraph below to just before Roberts. Go in more detail and use figures for explanation.

The first step in the Canny edge detector is to smooth the image to remove as much noise as possible. There is a trade off here that has to be considered. The more the image is smoothed, the better the Signal to Noise Ratio (SNR) becomes which improves edge detection. However, when an image is smoothed, the edges become wider; as in there are more pixels that represent an edge. These extra pixels cause localization problems, which means now that the edges are wider, the maximum intensity along the width of an edge decreases and therefore, the edge center determined by the Canny detector may not be the true center. To summarize, the more the image is smoothed, the better edges are detected, but may not be detected in the correct location compared to the original image. This means you want to smooth the image enough to increase SNR but not so much that that the detector has poor localization.

To smooth an image, a Gaussian filter is used. The larger the filter window, the more noise is removed, but the image becomes more blurry which reduces localization. Typically a 3x3 or a 5x5 pixel window size is used, but it depends on the application. If a window size of 1x1 is used, the original image is unaffected. **(TODO: Explain why here)**

The second step in the Canny detector is to find the Gradient intensities. This is typically done by convolving two masks with the image to find the gradients in the X and Y directions.

The 3x3 convolution masks that the operator uses are:

**(TODO)**:Add convolution masks

Once the gradients in the X and Y directions are determined, the next stage is to find the magnitude and direction of the gradients. This is done using:

**(TODO)**: Add equations for magnitude and angle

The third step is using non-maximum suppression to determine the true location of the edge. This is done by using the gradient direction for a given pixel and comparing the gradient magnitudes. If the current pixel has a larger intesity than the two neighboring pixels, then the pixel remians. If the current pixel's intensity is less than either neighbor, then the pixel in removed or suppressed. The final results will be a single continuous edge tha is one pixel wide. This represents the "True" location of the edge.

**(TODO)**: Add figures for non-maximum suppression and elaborate more on how it works by including figures.

The final step the Canny detector takes is what makes it different from all other classical detectors and also why the Canny detector is so popular. The last step is thresholding use hysteresis. This means, that unlike other classical methods, instead of using a single threshold for edge detection, Canny uses two thresholds instead. There is a higher and lower threshold and the higher to lower threshold ration is typically 2:1 or 3:1. Meaning the higher threshold is either twice or three times as large as the lower threshold. Again though, this all depends on the specifc application; there is no one size fits all thresholding scheme.

The way hysteresis works is that the remaining edge pixel intensities are examined. If the pixel intesity is greater than the higher threshold, then the pixel is put into the final image. If the pixel intesity is less than the lower threshold, then the pixel is removed. However, if a pixel is greater than the lower threshold, but less than the higher threshold, then the pixel is marked as a "maybe" pixel. Once all pixels have been label, the "maybe" pixels are the reexamined. If these pixels are connected to a strong edge, the pixels that are above the higher threshold, then they are added to the final image. If they are not conncected to a strong edge, then they are also removed.

This allows for some leeway in the threshold scheme to allow for edges that may be occluded by a shadow or is a different color to show up in the final image. 

**(TODO)**: Add more about Hysteresis as well as some images.

(Discuss the assumptions Canny makes and why they are good assumptions)

## The "Standard" Detector

### Assumptions
(Discuss why the Canny algorithm is used instead of the others)

### Improved Canny Detector
(Present some improvements that were found)
(Explain why we will use the "vanilla" version)